{"version":3,"sources":["static/camera_para.dat","components/ViewerArToolkit.js","App.js","reportWebVitals.js","index.js"],"names":["initAr","a","ARController","initWithDimensions","cameraData","arController","artoolkit","addNFTMarker","id","then","markerId","console","log","ViewerArToolkit","useState","createRef","video","constraints","audio","facingMode","width","height","frameRate","max","videoError","error","handleVideo","stream","current","srcObject","useEffect","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","oGetUserMedia","ref","autoPlay","App","vh","document","documentElement","clientHeight","window","innerHeight","style","setProperty","addEventListener","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sNAAe,MAA0B,wC,OCqHnCA,EAAM,uCAAG,4BAAAC,EAAA,sEACcC,eAAaC,mBACtC,IACA,IACAC,GAJW,QACPC,EADO,QAMAC,UAAUC,aACrBF,EAAaG,GACb,6CACAC,MAAK,SAACC,GACNC,QAAQC,IAAI,8BAA+BF,MAVhC,2CAAH,qDAoEGG,EAhDS,WAAO,IAAD,EACZC,mBAASC,uBAAlBC,EADqB,oBAGtBC,EAAc,CAClBC,OAAO,EACPF,MAAO,CAELG,WAAY,OACZC,MAAO,IACPC,OAAQ,IACRC,UAAW,CAAEC,IAAK,MAIhBC,EAAa,SAACC,GAClBd,QAAQC,IAAI,QAASa,IAGjBC,EAAc,SAACC,GACnBX,EAAMY,QAAQC,UAAYF,EAC1B3B,KAyBF,OAtBA8B,qBAAU,WACRC,UAAUC,aACRD,UAAUC,cACVD,UAAUE,oBACVF,UAAUG,iBACVH,UAAUI,gBACVJ,UAAUK,cACRL,UAAUC,cACZD,UAAUC,aAAaf,EAAaS,EAAaF,MAc9C,uBAAOa,IAAKrB,EAAOsB,UAAQ,KC5JrBC,EAxBH,WACV,IAAIC,EAIsB,KAHtBC,UACAA,SAASC,iBACTD,SAASC,gBAAgBC,cACzBC,OAAOC,aAYX,OAXAJ,SAASC,gBAAgBI,MAAMC,YAAY,OAA3C,UAAsDP,EAAtD,OAEAI,OAAOI,iBAAiB,UAAU,WAChCR,EAI0B,KAHtBC,UACAA,SAASC,iBACTD,SAASC,gBAAgBC,cACzBC,OAAOC,aACXJ,SAASC,gBAAgBI,MAAMC,YAAY,OAA3C,UAAsDP,EAAtD,UAIA,qBAAKS,UAAU,MAAf,SACE,cAAC,EAAD,OCTSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BX,M","file":"static/js/main.5acef4ee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/camera_para.fb94e301.dat\";","import { useEffect, useState, createRef } from 'react';\nimport { ARController } from 'artoolkit5-js';\nimport cameraData from '../static/camera_para.dat';\n// import detectNFTMarker from '../utils/markerTracker';\n\n// const initCamera = async (video) => {\n//   const constraints = {\n//     audio: false,\n//     video: {\n//       //facingMode: \"environment\",\n//       facingMode: 'user',\n//       width: 640,\n//       height: 480,\n//       frameRate: { max: 30 },\n//     },\n//   };\n//   const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n//   console.log('init camera');\n\n//   video.current.srcObject = stream;\n\n//   // setVideoStream(stream);\n\n//   // video.onloadedmediadata = () => {\n//   //   console.log('video loadedmediadata');\n//   //   video.play();\n//   // };\n// };\n\n// const onError = (error) => {\n//   console.error('Error while intizalizing arController', error);\n// };\n\n// const onload = (arController) => {\n//   arController\n//     .loadNFTMarker('ar-test/static/markers/digitalls_marker')\n//     .then((markerId) => {\n//       arController.trackNFTMarkerId(markerId);\n//     })\n//     .catch((err) => {\n//       console.log('Error in loading marker on Worker', err);\n//     });\n\n//   arController.addEventListener('getNFTMarker', (ev) => {\n//     const markerResult = {\n//       type: 'found',\n//       matrix: JSON.stringify(ev.data.matrix),\n//     };\n//     console.log('markerFound', markerResult);\n//   });\n// };\n\n\n// const startProcessing = () => {\n\n//   const processFrame = () => {\n//     const result = arc.detectMarker(sourceVideo);\n//     if(result !== 0) {\n//       // ARToolkit returning a value !== 0 means an error occured\n//       console.log('Error detecting markers');\n//       return;\n//     }\n\n//     // get the total number of detected markers in frame\n//     const markerNum = arc.getMarkerNum();\n//     let hiroMarkerNum = false;\n\n//     // check if one of the detected markers is the HIRO marker\n//     for(let i = 0; i < markerNum; i++) {\n//       const markerInfo = arc.getMarker(i);\n//       if(markerInfo.idPatt == markerId) {\n//         // store the marker ID from the detection result\n//         hiroMarkerNum = i;\n//         break;\n//       }\n//     }\n\n//     if(hiroMarkerNum !== false) {\n\n//       // HIRO marker found\n//       if(markerRoot.visible) {\n//         arc.getTransMatSquareCont(\n//           hiroMarkerNum, 1, markerRoot.markerMatrix, markerRoot.markerMatrix\n//         );\n//       } else {\n//         arc.getTransMatSquare(\n//           hiroMarkerNum /* Marker index */, 1 /* Marker width */, markerRoot.markerMatrix\n//         );\n//       }\n\n//       // show marker root\n//       markerRoot.visible = true;\n\n//       // position camera\n//       arc.arglCameraViewRHf(\n//         arc.transMatToGLMat(markerRoot.markerMatrix),\n//         markerRoot.matrix.elements\n//       );\n\n//     } else {\n\n//       // not found\n//       markerRoot.visible = false;\n//     }\n\n//     // render the scene\n//     renderer.clear();\n//     renderer.render(scene, camera);\n\n//     // process next frame\n//     window.requestAnimationFrame(processFrame);\n//   };\n\n\n\n\nconst initAr = async () => {\n  const arController = await ARController.initWithDimensions(\n    640,\n    480,\n    cameraData\n  );\n  arController.artoolkit.addNFTMarker(\n    arController.id,\n    'ar-test/static/markers/digitalls_markerrr'\n  ).then((markerId) => {\n    console.log('Marker added with marker ID', markerId);\n  });\n\n  // const digitallsMarkerId = await controller.artoolkit.addNFTMarker(\n  //   controller.id,\n  //   'ar-test/static/markers/digitalls_marker'\n  // );\n  // detectNFTMarker(controller, digitallsMarkerId);\n};\n\nconst ViewerArToolkit = () => {\n  const [video] = useState(createRef());\n\n  const constraints = {\n    audio: false,\n    video: {\n      //facingMode: \"environment\",\n      facingMode: 'user',\n      width: 640,\n      height: 480,\n      frameRate: { max: 30 },\n    },\n  };\n\n  const videoError = (error) => {\n    console.log('error', error);\n  };\n\n  const handleVideo = (stream) => {\n    video.current.srcObject = stream;\n    initAr();\n  };\n\n  useEffect(() => {\n    navigator.getUserMedia =\n      navigator.getUserMedia ||\n      navigator.webkitGetUserMedia ||\n      navigator.mozGetUserMedia ||\n      navigator.msGetUserMedia ||\n      navigator.oGetUserMedia;\n    if (navigator.getUserMedia) {\n      navigator.getUserMedia(constraints, handleVideo, videoError);\n    }\n  });\n\n  // const [videoStream, setVideoStream] = useState(null);\n  // const handleLoadedMetadata = () => {\n  //   console.log('loaded metadata');\n  //   video.play();\n  // };\n  // const handleLoadedData = () => {\n  //   console.log('Camera is ready');\n  //   initAr();\n  // };\n\n  return <video ref={video} autoPlay></video>;\n};\n\nexport default ViewerArToolkit;\n","import ViewerArToolkit from './components/ViewerArToolkit';\n\nconst App = () => {\n  let vh =\n    ((document &&\n      document.documentElement &&\n      document.documentElement.clientHeight) ||\n      window.innerHeight) * 0.01;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n\n  window.addEventListener('resize', () => {\n    vh =\n      ((document &&\n        document.documentElement &&\n        document.documentElement.clientHeight) ||\n        window.innerHeight) * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n  });\n\n  return (\n    <div className=\"App\">\n      <ViewerArToolkit />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}