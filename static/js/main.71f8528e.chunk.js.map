{"version":3,"sources":["static/camera_para.dat","components/ViewerArToolkit.js","App.js","reportWebVitals.js","index.js"],"names":["startProcessing","arController","video","markerId","processFrame","detectMarker","current","markerNum","getMarkerNum","hiroMarkerNum","i","getMarker","idPatt","console","log","window","requestAnimationFrame","initAr","a","ARController","initWithDimensions","cameraData","artoolkit","addNFTMarker","id","ViewerArToolkit","useState","createRef","constraints","audio","facingMode","width","height","frameRate","max","videoError","error","handleVideo","stream","srcObject","useEffect","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","oGetUserMedia","ref","autoPlay","App","vh","document","documentElement","clientHeight","innerHeight","style","setProperty","addEventListener","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sNAAe,MAA0B,wC,OCqDnCA,EAAkB,SAACC,EAAcC,EAAOC,IACvB,SAAfC,IAEJ,GAAe,IADAH,EAAaI,aAAaH,EAAMI,SAC/C,CAUA,IAJA,IAAMC,EAAYN,EAAaO,eAC3BC,GAAgB,EAGXC,EAAI,EAAGA,EAAIH,EAAWG,IAAK,CAElC,GADmBT,EAAaU,UAAUD,GAC3BE,QAAUT,EAAU,CAEjCM,EAAgBC,EAChB,QAIkB,IAAlBD,GACFI,QAAQC,IAAI,eAoCdC,OAAOC,sBAAsBZ,QAvD3BS,QAAQC,IAAI,2BAyDhBV,IAGIa,EAAM,uCAAG,WAAOf,GAAP,iBAAAgB,EAAA,sEACcC,eAAaC,mBACtC,IACA,IACAC,GAJW,cACPpB,EADO,gBAMUA,EAAaqB,UAAUC,aAC5CtB,EAAauB,GACb,4CARW,OAMPrB,EANO,OAWbU,QAAQC,IAAI,8BAA+BX,GAE3CH,EAAgBC,EAAcC,EAAOC,GAbxB,2CAAH,sDAsEGsB,EAhDS,WAAO,IAAD,EACZC,mBAASC,uBAAlBzB,EADqB,oBAGtB0B,EAAc,CAClBC,OAAO,EACP3B,MAAO,CAEL4B,WAAY,OACZC,MAAO,IACPC,OAAQ,IACRC,UAAW,CAAEC,IAAK,MAIhBC,EAAa,SAACC,GAClBvB,QAAQC,IAAI,QAASsB,IAGjBC,EAAc,SAACC,GACnBpC,EAAMI,QAAQiC,UAAYD,EAC1BrB,EAAOf,IAyBT,OAtBAsC,qBAAU,WACRC,UAAUC,aACRD,UAAUC,cACVD,UAAUE,oBACVF,UAAUG,iBACVH,UAAUI,gBACVJ,UAAUK,cACRL,UAAUC,cACZD,UAAUC,aAAad,EAAaS,EAAaF,MAc9C,uBAAOY,IAAK7C,EAAO8C,UAAQ,KC9JrBC,EAxBH,WACV,IAAIC,EAIsB,KAHtBC,UACAA,SAASC,iBACTD,SAASC,gBAAgBC,cACzBtC,OAAOuC,aAYX,OAXAH,SAASC,gBAAgBG,MAAMC,YAAY,OAA3C,UAAsDN,EAAtD,OAEAnC,OAAO0C,iBAAiB,UAAU,WAChCP,EAI0B,KAHtBC,UACAA,SAASC,iBACTD,SAASC,gBAAgBC,cACzBtC,OAAOuC,aACXH,SAASC,gBAAgBG,MAAMC,YAAY,OAA3C,UAAsDN,EAAtD,UAIA,qBAAKQ,UAAU,MAAf,SACE,cAAC,EAAD,OCTSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BZ,M","file":"static/js/main.71f8528e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/camera_para.fb94e301.dat\";","import { useEffect, useState, createRef } from 'react';\nimport { ARController } from '@litc0de/artoolkit5-js';\nimport cameraData from '../static/camera_para.dat';\n// import detectNFTMarker from '../utils/markerTracker';\n\n// const initCamera = async (video) => {\n//   const constraints = {\n//     audio: false,\n//     video: {\n//       //facingMode: \"environment\",\n//       facingMode: 'user',\n//       width: 640,\n//       height: 480,\n//       frameRate: { max: 30 },\n//     },\n//   };\n//   const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n//   console.log('init camera');\n\n//   video.current.srcObject = stream;\n\n//   // setVideoStream(stream);\n\n//   // video.onloadedmediadata = () => {\n//   //   console.log('video loadedmediadata');\n//   //   video.play();\n//   // };\n// };\n\n// const onError = (error) => {\n//   console.error('Error while intizalizing arController', error);\n// };\n\n// const onload = (arController) => {\n//   arController\n//     .loadNFTMarker('ar-test/static/markers/digitalls_marker')\n//     .then((markerId) => {\n//       arController.trackNFTMarkerId(markerId);\n//     })\n//     .catch((err) => {\n//       console.log('Error in loading marker on Worker', err);\n//     });\n\n//   arController.addEventListener('getNFTMarker', (ev) => {\n//     const markerResult = {\n//       type: 'found',\n//       matrix: JSON.stringify(ev.data.matrix),\n//     };\n//     console.log('markerFound', markerResult);\n//   });\n// };\n\nconst startProcessing = (arController, video, markerId) => {\n  const processFrame = () => {\n    const result = arController.detectMarker(video.current);\n    if (result !== 0) {\n      console.log('Error detecting markers');\n      return;\n    }\n\n    // get the total number of detected markers in frame\n    const markerNum = arController.getMarkerNum();\n    let hiroMarkerNum = false;\n\n    // check if one of the detected markers is the HIRO marker\n    for (let i = 0; i < markerNum; i++) {\n      const markerInfo = arController.getMarker(i);\n      if (markerInfo.idPatt == markerId) {\n        // store the marker ID from the detection result\n        hiroMarkerNum = i;\n        break;\n      }\n    }\n\n    if (hiroMarkerNum !== false) {\n      console.log('markerFound');\n\n    //   // HIRO marker found\n    //   if (markerRoot.visible) {\n    //     arController.getTransMatSquareCont(\n    //       hiroMarkerNum,\n    //       1,\n    //       markerRoot.markerMatrix,\n    //       markerRoot.markerMatrix\n    //     );\n    //   } else {\n    //     arController.getTransMatSquare(\n    //       hiroMarkerNum /* Marker index */,\n    //       1 /* Marker width */,\n    //       markerRoot.markerMatrix\n    //     );\n    //   }\n\n    //   // show marker root\n    //   markerRoot.visible = true;\n\n    //   // position camera\n    //   arController.arglCameraViewRHf(\n    //     arController.transMatToGLMat(markerRoot.markerMatrix),\n    //     markerRoot.matrix.elements\n    //   );\n    // } else {\n    //   // not found\n    //   markerRoot.visible = false;\n    }\n\n    // // render the scene\n    // renderer.clear();\n    // renderer.render(scene, camera);\n\n    // process next frame\n    window.requestAnimationFrame(processFrame);\n  };\n  processFrame();\n};\n\nconst initAr = async (video) => {\n  const arController = await ARController.initWithDimensions(\n    640,\n    480,\n    cameraData\n  );\n  const markerId = await arController.artoolkit.addNFTMarker(\n    arController.id,\n    '/ar-test/static/markers/digitalls_marker'\n  );\n\n  console.log('Marker added with marker ID', markerId);\n\n  startProcessing(arController, video, markerId);\n\n  // const digitallsMarkerId = await controller.artoolkit.addNFTMarker(\n  //   controller.id,\n  //   'ar-test/static/markers/digitalls_marker'\n  // );\n  // detectNFTMarker(controller, digitallsMarkerId);\n};\n\nconst ViewerArToolkit = () => {\n  const [video] = useState(createRef());\n\n  const constraints = {\n    audio: false,\n    video: {\n      //facingMode: \"environment\",\n      facingMode: 'user',\n      width: 640,\n      height: 480,\n      frameRate: { max: 30 },\n    },\n  };\n\n  const videoError = (error) => {\n    console.log('error', error);\n  };\n\n  const handleVideo = (stream) => {\n    video.current.srcObject = stream;\n    initAr(video);\n  };\n\n  useEffect(() => {\n    navigator.getUserMedia =\n      navigator.getUserMedia ||\n      navigator.webkitGetUserMedia ||\n      navigator.mozGetUserMedia ||\n      navigator.msGetUserMedia ||\n      navigator.oGetUserMedia;\n    if (navigator.getUserMedia) {\n      navigator.getUserMedia(constraints, handleVideo, videoError);\n    }\n  });\n\n  // const [videoStream, setVideoStream] = useState(null);\n  // const handleLoadedMetadata = () => {\n  //   console.log('loaded metadata');\n  //   video.play();\n  // };\n  // const handleLoadedData = () => {\n  //   console.log('Camera is ready');\n  //   initAr();\n  // };\n\n  return <video ref={video} autoPlay></video>;\n};\n\nexport default ViewerArToolkit;\n","import ViewerArToolkit from './components/ViewerArToolkit';\n\nconst App = () => {\n  let vh =\n    ((document &&\n      document.documentElement &&\n      document.documentElement.clientHeight) ||\n      window.innerHeight) * 0.01;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n\n  window.addEventListener('resize', () => {\n    vh =\n      ((document &&\n        document.documentElement &&\n        document.documentElement.clientHeight) ||\n        window.innerHeight) * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n  });\n\n  return (\n    <div className=\"App\">\n      <ViewerArToolkit />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}