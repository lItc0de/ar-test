{"version":3,"sources":["static/camera_para.dat","utils/markerTracker.js","components/ViewerArToolkit.js","App.js","reportWebVitals.js","index.js"],"names":["trackMarker","controller","markerId","detectMarker","markerNum","getMarkerNum","markerFound","i","getMarker","idPatt","console","log","registerController","a","ARController","initWithDimensions","cameraData","artoolkit","addNFTMarker","id","digitallsMarkerId","ViewerArToolkit","useEffect","App","vh","document","documentElement","clientHeight","window","innerHeight","style","setProperty","addEventListener","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+MAAe,MAA0B,wCCgC1BA,EAhCK,SAACC,EAAYC,GAM7B,GAAe,IADAD,EAAWE,eAC1B,CAWA,IAJA,IAAMC,EAAYH,EAAWI,eACzBC,GAAc,EAGTC,EAAI,EAAGA,EAAIH,EAAWG,IAAK,CAElC,GADmBN,EAAWO,UAAUD,GACzBE,QAAUP,EAAU,CAEjCI,EAAcC,EACd,QAIgB,IAAhBD,GACFI,QAAQC,IAAI,uCAnBZD,QAAQC,IAAI,4B,OCHZC,EAAkB,uCAAG,8BAAAC,EAAA,sEACAC,eAAaC,mBAAmB,IAAK,IAAKC,GAD1C,cACnBf,EADmB,gBAEOA,EAAWgB,UAAUC,aAAajB,EAAWkB,GAAI,2CAFxD,OAEnBC,EAFmB,OAGzBpB,EAAYC,EAAYmB,GAHC,2CAAH,qDAcTC,EARS,WAKtB,OAJAC,qBAAU,WACRV,OAGK,yCCUMW,EAxBH,WACV,IAAIC,EAIsB,KAHtBC,UACAA,SAASC,iBACTD,SAASC,gBAAgBC,cACzBC,OAAOC,aAYX,OAXAJ,SAASC,gBAAgBI,MAAMC,YAAY,OAA3C,UAAsDP,EAAtD,OAEAI,OAAOI,iBAAiB,UAAU,WAChCR,EAI0B,KAHtBC,UACAA,SAASC,iBACTD,SAASC,gBAAgBC,cACzBC,OAAOC,aACXJ,SAASC,gBAAgBI,MAAMC,YAAY,OAA3C,UAAsDP,EAAtD,UAIA,qBAAKS,UAAU,MAAf,SACE,cAAC,EAAD,OCTSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,SAM1BZ,M","file":"static/js/main.b3b9e3b9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/camera_para.fb94e301.dat\";","const trackMarker = (controller, markerId) => {\n  // track with 60 FPS\n  const FPS = 60;\n\n  // setInterval(() => {\n    const result = controller.detectMarker();\n    if (result !== 0) {\n      // ARToolkit returning a value !== 0 means an error occured\n      console.log('Error detecting markers');\n      return;\n    }\n\n    // get the total number of detected markers in frame\n    const markerNum = controller.getMarkerNum();\n    let markerFound = false;\n\n    // check if one of the detected markers is the \"Hiro\" marker\n    for (let i = 0; i < markerNum; i++) {\n      const markerInfo = controller.getMarker(i);\n      if (markerInfo.idPatt == markerId) {\n        // store the marker ID from the detection result\n        markerFound = i;\n        break;\n      }\n    }\n\n    if (markerFound !== false) {\n      console.log('You have found the HIRO marker');\n    }\n  // }, 1000 / FPS);\n};\n\nexport default trackMarker;\n","import { useEffect, useState } from 'react';\nimport { ARController } from 'artoolkit5-js'\nimport cameraData from '../static/camera_para.dat';\nimport trackMarker from '../utils/markerTracker';\n\nconst registerController = async () => {\n  const controller = await ARController.initWithDimensions(640, 480, cameraData);\n  const digitallsMarkerId = await controller.artoolkit.addNFTMarker(controller.id, 'ar-test/static/markers/digitalls_marker');\n  trackMarker(controller, digitallsMarkerId);\n}\n\nconst ViewerArToolkit = () => {\n  useEffect(() => {\n    registerController();\n  })\n\n  return <div>Hello</div>;\n};\n\nexport default ViewerArToolkit;\n","import ViewerArToolkit from './components/ViewerArToolkit';\n\nconst App = () => {\n  let vh =\n    ((document &&\n      document.documentElement &&\n      document.documentElement.clientHeight) ||\n      window.innerHeight) * 0.01;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n\n  window.addEventListener('resize', () => {\n    vh =\n      ((document &&\n        document.documentElement &&\n        document.documentElement.clientHeight) ||\n        window.innerHeight) * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n  });\n\n  return (\n    <div className=\"App\">\n      <ViewerArToolkit />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}