{"version":3,"sources":["utils/initializeRenderer.js","static/camera_para.dat","utils/arToolkit.js","components/ViewerAr.js","App.js","reportWebVitals.js","index.js"],"names":["THREE","Color","WebGLRenderer","initializeRenderer","canvas","renderer","alpha","setClearColor","setSize","window","innerWidth","innerHeight","domElement","style","position","top","left","THREEx","ArMarkerControls","ArToolkitContext","ArToolkitSource","Camera","Scene","ViewerAR","useState","markerFound","setMarkerFound","useEffect","scene","camera","add","onRenderFcts","marker","arToolkitContext","type","descriptorsUrl","changeMatrixMode","getMarker","baseURL","arToolkitSource","sourceType","onResize","onResizeElement","copyElementSizeTo","arController","init","setTimeout","addEventListener","ev","console","log","cameraParametersUrl","cameraData","detectionMode","projectionMatrix","copy","getProjectionMatrix","push","ready","update","initializeArToolkit","render","lastTimeMsec","requestAnimationFrame","animate","nowMsec","deltaMsec","Math","min","forEach","onRenderFct","ref","node","App","vh","document","documentElement","clientHeight","setProperty","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cb164432.chunk.js","sourcesContent":["/* globals THREE */\nconst { Color, WebGLRenderer } = THREE;\n\nconst initializeRenderer = (canvas) => {\n  const renderer = new WebGLRenderer({ alpha: true, canvas });\n  renderer.setClearColor(new Color('lightgrey'), 0);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.domElement.style.position = 'absolute';\n  renderer.domElement.style.top = '0px';\n  renderer.domElement.style.left = '0px';\n  return renderer;\n};\n\nexport default initializeRenderer;\n","export default __webpack_public_path__ + \"static/media/camera_para.fb94e301.dat\";","/* globals THREEx */\nimport cameraData from '../static/camera_para.dat';\n\nconst { ArMarkerControls, ArToolkitContext, ArToolkitSource } = THREEx;\n\nexport const initializeArToolkit = (renderer, camera, onRenderFcts) => {\n  ArToolkitContext.baseURL = '../';\n\n  const arToolkitSource = new ArToolkitSource({ sourceType: 'webcam' });\n\n  const onResize = () => {\n    arToolkitSource.onResizeElement();\n    arToolkitSource.copyElementSizeTo(renderer.domElement);\n    if (arToolkitContext.arController !== null) {\n      arToolkitSource.copyElementSizeTo(arToolkitContext.arController.canvas);\n    }\n  };\n\n  arToolkitSource.init(() => {\n    setTimeout(() => {\n      onResize();\n    }, 1000);\n  });\n\n  window.addEventListener('resize', () => {\n    onResize();\n  });\n\n  window.addEventListener('arjs-nft-loaded', function(ev){\n    console.log(ev);\n  })\n\n  // create atToolkitContext\n  const arToolkitContext = new ArToolkitContext({\n    cameraParametersUrl: cameraData,\n    detectionMode: 'mono',\n    // canvasWidth: 800,\n    // canvasHeight: 600\n  });\n\n  arToolkitContext.init(() => {\n    camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());\n  });\n\n  // update artoolkit on every frame\n  onRenderFcts.push(() => {\n    if (arToolkitSource.ready === false) return;\n    arToolkitContext.update(arToolkitSource.domElement);\n  });\n  return arToolkitContext;\n};\n\nexport const getMarker = (arToolkitContext, camera) => {\n  return new ArMarkerControls(arToolkitContext, camera, {\n    type: 'nft',\n    descriptorsUrl: 'ar-test/static/markers/digitalls_marker',\n    changeMatrixMode: 'cameraTransformMatrix',\n  });\n};\n","/* globals THREE */\nimport { useEffect, useState } from 'react';\n\nimport initializeRenderer from '../utils/initializeRenderer';\nimport { initializeArToolkit, getMarker } from '../utils/arToolkit';\n\nconst { Camera, Scene } = THREE;\n\nconst ViewerAR = () => {\n  const [markerFound, setMarkerFound] = useState(false);\n\n  let canvas = null;\n\n  useEffect(() => {\n    const renderer = initializeRenderer(canvas);\n\n    const scene = new Scene();\n    const camera = new Camera();\n    scene.add(camera);\n\n    const onRenderFcts = [];\n    const arToolkitContext = initializeArToolkit(\n      renderer,\n      camera,\n      onRenderFcts\n    );\n\n    const marker = getMarker(arToolkitContext, camera);\n    marker.addEventListener('markerFound', () => {\n      setMarkerFound(true);\n    });\n\n    marker.addEventListener('markerLost', () => {\n      setMarkerFound(false);\n    });\n\n    // var light = new AmbientLight(0x404040, props.light); // white light\n    // scene.add(light);\n\n    // render the scene\n    onRenderFcts.push(() => {\n      renderer.render(scene, camera);\n    });\n\n    // run the rendering loop\n    let lastTimeMsec = null;\n\n    const animate = nowMsec => {\n      // keep looping\n      requestAnimationFrame(animate);\n      // measure time\n      lastTimeMsec = lastTimeMsec || nowMsec - 1000 / 60;\n      const deltaMsec = Math.min(200, nowMsec - lastTimeMsec);\n      lastTimeMsec = nowMsec;\n      // call each update function\n      onRenderFcts.forEach(onRenderFct => {\n        onRenderFct(deltaMsec / 1000, nowMsec / 1000);\n      });\n    };\n    requestAnimationFrame(animate);\n\n    /* eslint-disable-next-line */\n  }, []);\n\n  const storeRef = (node) => {\n    canvas = node;\n  };\n\n  return (\n    <div>\n      <canvas ref={storeRef} />\n      {markerFound && (\n        <div>\n          <h1>Hello</h1>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ViewerAR;\n","import ViewerAR from './components/ViewerAr';\n\nconst App = () => {\n  let vh =\n    ((document &&\n      document.documentElement &&\n      document.documentElement.clientHeight) ||\n      window.innerHeight) * 0.01;\n  document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\n\n  window.addEventListener(\"resize\", () => {\n    vh =\n      ((document &&\n        document.documentElement &&\n        document.documentElement.clientHeight) ||\n        window.innerHeight) * 0.01;\n    document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\n  });\n\n  return (\n    <div className=\"App\">\n      <ViewerAR />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}