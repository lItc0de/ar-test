{"version":3,"sources":["static/camera_para.dat","components/ViewerArToolkit.js","App.js","reportWebVitals.js","index.js"],"names":["initCamera","setVideoStream","a","constraints","audio","video","facingMode","width","height","frameRate","max","navigator","mediaDevices","getUserMedia","stream","console","log","onError","error","onload","arController","loadNFTMarker","then","markerId","trackNFTMarkerId","catch","err","addEventListener","ev","markerResult","type","matrix","JSON","stringify","data","initAr","ARController","initWithDimensions","cameraData","ViewerArToolkit","useState","videoStream","createRef","useEffect","ref","srcObject","onLoadedMetadata","play","loadedData","App","vh","document","documentElement","clientHeight","window","innerHeight","style","setProperty","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sNAAe,MAA0B,wC,OCKnCA,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACXC,EAAc,CAClBC,OAAO,EACPC,MAAO,CAELC,WAAY,OACZC,MAAO,IACPC,OAAQ,IACRC,UAAW,CAAEC,IAAK,MARL,SAWIC,UAAUC,aAAaC,aAAaV,GAXxC,OAWXW,EAXW,OAajBC,QAAQC,IAAI,eAEZf,EAAea,GAfE,2CAAH,sDAkBVG,EAAU,SAACC,GACfH,QAAQG,MAAM,wCAAyCA,IAGnDC,EAAS,SAACC,GACdA,EACGC,cAAc,2CACdC,MAAK,SAACC,GACLH,EAAaI,iBAAiBD,MAE/BE,OAAM,SAACC,GACNX,QAAQC,IAAI,oCAAqCU,MAGrDN,EAAaO,iBAAiB,gBAAgB,SAACC,GAC7C,IAAMC,EAAe,CACnBC,KAAM,QACNC,OAAQC,KAAKC,UAAUL,EAAGM,KAAKH,SAEjChB,QAAQC,IAAI,cAAea,OAIzBM,EAAM,uCAAG,sBAAAjC,EAAA,sDACbkC,eAAaC,mBAAmB,IAAK,IAAKC,GACvChB,KAAKH,GACLM,MAAMR,GAHI,2CAAH,qDAyCGsB,EA7BS,WAAO,IAAD,EACUC,mBAAS,MADnB,mBACrBC,EADqB,KACRxC,EADQ,KAEtBI,EAAQqC,sBAcd,OAJAC,qBAAU,WACR3C,EAAWC,KACV,IAGD,mCACGwC,EAAc,uBACbG,IAAKvC,EACLwC,UAAWJ,EACXK,iBAlBuB,WAC3B/B,QAAQC,IAAI,mBACZX,EAAM0C,QAiBFC,WAfmB,WACvBjC,QAAQC,IAAI,mBACZmB,OAeE,qDCxDSc,EAxBH,WACV,IAAIC,EAIsB,KAHtBC,UACAA,SAASC,iBACTD,SAASC,gBAAgBC,cACzBC,OAAOC,aAYX,OAXAJ,SAASC,gBAAgBI,MAAMC,YAAY,OAA3C,UAAsDP,EAAtD,OAEAI,OAAO3B,iBAAiB,UAAU,WAChCuB,EAI0B,KAHtBC,UACAA,SAASC,iBACTD,SAASC,gBAAgBC,cACzBC,OAAOC,aACXJ,SAASC,gBAAgBI,MAAMC,YAAY,OAA3C,UAAsDP,EAAtD,UAIA,qBAAKQ,UAAU,MAAf,SACE,cAAC,EAAD,OCTSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BX,M","file":"static/js/main.d9a5b611.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/camera_para.fb94e301.dat\";","import { useEffect, useState, createRef } from 'react';\nimport { ARController } from 'artoolkit5-js';\nimport cameraData from '../static/camera_para.dat';\n// import detectNFTMarker from '../utils/markerTracker';\n\nconst initCamera = async (setVideoStream) => {\n  const constraints = {\n    audio: false,\n    video: {\n      //facingMode: \"environment\",\n      facingMode: 'user',\n      width: 640,\n      height: 480,\n      frameRate: { max: 30 },\n    },\n  };\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n  console.log('init camera');\n\n  setVideoStream(stream);\n};\n\nconst onError = (error) => {\n  console.error('Error while intizalizing arController', error);\n};\n\nconst onload = (arController) => {\n  arController\n    .loadNFTMarker('ar-test/static/markers/digitalls_marker')\n    .then((markerId) => {\n      arController.trackNFTMarkerId(markerId);\n    })\n    .catch((err) => {\n      console.log('Error in loading marker on Worker', err);\n    });\n\n  arController.addEventListener('getNFTMarker', (ev) => {\n    const markerResult = {\n      type: 'found',\n      matrix: JSON.stringify(ev.data.matrix),\n    };\n    console.log('markerFound', markerResult);\n  });\n};\n\nconst initAr = async () => {\n  ARController.initWithDimensions(640, 480, cameraData)\n    .then(onload)\n    .catch(onError);\n\n  // const digitallsMarkerId = await controller.artoolkit.addNFTMarker(\n  //   controller.id,\n  //   'ar-test/static/markers/digitalls_marker'\n  // );\n  // detectNFTMarker(controller, digitallsMarkerId);\n};\n\nconst ViewerArToolkit = () => {\n  const [videoStream, setVideoStream] = useState(null);\n  const video = createRef();\n  const handleLoadedMetadata = () => {\n    console.log('loaded metadata');\n    video.play();\n  };\n  const handleLoadedData = () => {\n    console.log('Camera is ready');\n    initAr();\n  };\n\n  useEffect(() => {\n    initCamera(setVideoStream);\n  }, []);\n\n  return (\n    <>\n      {videoStream ? <video\n        ref={video}\n        srcObject={videoStream}\n        onLoadedMetadata={handleLoadedMetadata}\n        loadedData={handleLoadedData}\n      ></video> :\n      <h1>Video loading...</h1>}\n    </>\n  );\n};\n\nexport default ViewerArToolkit;\n","import ViewerArToolkit from './components/ViewerArToolkit';\n\nconst App = () => {\n  let vh =\n    ((document &&\n      document.documentElement &&\n      document.documentElement.clientHeight) ||\n      window.innerHeight) * 0.01;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n\n  window.addEventListener('resize', () => {\n    vh =\n      ((document &&\n        document.documentElement &&\n        document.documentElement.clientHeight) ||\n        window.innerHeight) * 0.01;\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\n  });\n\n  return (\n    <div className=\"App\">\n      <ViewerArToolkit />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}